
obrotomierz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000424  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000424  000004b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800062  00800062  000004ba  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000004ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000c9  00000000  00000000  000004da  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002e6  00000000  00000000  000005a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001a1  00000000  00000000  00000889  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000054c  00000000  00000000  00000a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00000f78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000179  00000000  00000000  00001038  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a6  00000000  00000000  000011b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	21 c0       	rjmp	.+66     	; 0x44 <__ctors_end>
   2:	4d c0       	rjmp	.+154    	; 0x9e <__vector_1>
   4:	3a c0       	rjmp	.+116    	; 0x7a <__bad_interrupt>
   6:	39 c0       	rjmp	.+114    	; 0x7a <__bad_interrupt>
   8:	38 c0       	rjmp	.+112    	; 0x7a <__bad_interrupt>
   a:	37 c0       	rjmp	.+110    	; 0x7a <__bad_interrupt>
   c:	36 c0       	rjmp	.+108    	; 0x7a <__bad_interrupt>
   e:	35 c0       	rjmp	.+106    	; 0x7a <__bad_interrupt>
  10:	34 c0       	rjmp	.+104    	; 0x7a <__bad_interrupt>
  12:	33 c0       	rjmp	.+102    	; 0x7a <__bad_interrupt>
  14:	32 c0       	rjmp	.+100    	; 0x7a <__bad_interrupt>
  16:	26 c1       	rjmp	.+588    	; 0x264 <__vector_11>
  18:	30 c0       	rjmp	.+96     	; 0x7a <__bad_interrupt>
  1a:	2f c0       	rjmp	.+94     	; 0x7a <__bad_interrupt>
  1c:	2e c0       	rjmp	.+92     	; 0x7a <__bad_interrupt>
  1e:	2d c0       	rjmp	.+90     	; 0x7a <__bad_interrupt>
  20:	2c c0       	rjmp	.+88     	; 0x7a <__bad_interrupt>
  22:	2b c0       	rjmp	.+86     	; 0x7a <__bad_interrupt>
  24:	2a c0       	rjmp	.+84     	; 0x7a <__bad_interrupt>
  26:	29 c0       	rjmp	.+82     	; 0x7a <__bad_interrupt>
  28:	28 c0       	rjmp	.+80     	; 0x7a <__bad_interrupt>
  2a:	f6 c0       	rjmp	.+492    	; 0x218 <light_up_leds+0xf2>
  2c:	fa c0       	rjmp	.+500    	; 0x222 <light_up_leds+0xfc>
  2e:	8e c0       	rjmp	.+284    	; 0x14c <light_up_leds+0x26>
  30:	8d c0       	rjmp	.+282    	; 0x14c <light_up_leds+0x26>
  32:	8c c0       	rjmp	.+280    	; 0x14c <light_up_leds+0x26>
  34:	a5 c0       	rjmp	.+330    	; 0x180 <light_up_leds+0x5a>
  36:	a4 c0       	rjmp	.+328    	; 0x180 <light_up_leds+0x5a>
  38:	a3 c0       	rjmp	.+326    	; 0x180 <light_up_leds+0x5a>
  3a:	a2 c0       	rjmp	.+324    	; 0x180 <light_up_leds+0x5a>
  3c:	ba c0       	rjmp	.+372    	; 0x1b2 <light_up_leds+0x8c>
  3e:	b9 c0       	rjmp	.+370    	; 0x1b2 <light_up_leds+0x8c>
  40:	b8 c0       	rjmp	.+368    	; 0x1b2 <light_up_leds+0x8c>
  42:	b7 c0       	rjmp	.+366    	; 0x1b2 <light_up_leds+0x8c>

00000044 <__ctors_end>:
  44:	11 24       	eor	r1, r1
  46:	1f be       	out	0x3f, r1	; 63
  48:	cf e5       	ldi	r28, 0x5F	; 95
  4a:	d2 e0       	ldi	r29, 0x02	; 2
  4c:	de bf       	out	0x3e, r29	; 62
  4e:	cd bf       	out	0x3d, r28	; 61

00000050 <__do_copy_data>:
  50:	10 e0       	ldi	r17, 0x00	; 0
  52:	a0 e6       	ldi	r26, 0x60	; 96
  54:	b0 e0       	ldi	r27, 0x00	; 0
  56:	e4 e2       	ldi	r30, 0x24	; 36
  58:	f4 e0       	ldi	r31, 0x04	; 4
  5a:	02 c0       	rjmp	.+4      	; 0x60 <.do_copy_data_start>

0000005c <.do_copy_data_loop>:
  5c:	05 90       	lpm	r0, Z+
  5e:	0d 92       	st	X+, r0

00000060 <.do_copy_data_start>:
  60:	a2 36       	cpi	r26, 0x62	; 98
  62:	b1 07       	cpc	r27, r17
  64:	d9 f7       	brne	.-10     	; 0x5c <.do_copy_data_loop>

00000066 <__do_clear_bss>:
  66:	10 e0       	ldi	r17, 0x00	; 0
  68:	a2 e6       	ldi	r26, 0x62	; 98
  6a:	b0 e0       	ldi	r27, 0x00	; 0
  6c:	01 c0       	rjmp	.+2      	; 0x70 <.do_clear_bss_start>

0000006e <.do_clear_bss_loop>:
  6e:	1d 92       	st	X+, r1

00000070 <.do_clear_bss_start>:
  70:	a3 36       	cpi	r26, 0x63	; 99
  72:	b1 07       	cpc	r27, r17
  74:	e1 f7       	brne	.-8      	; 0x6e <.do_clear_bss_loop>
  76:	b8 d1       	rcall	.+880    	; 0x3e8 <main>
  78:	d3 c1       	rjmp	.+934    	; 0x420 <_exit>

0000007a <__bad_interrupt>:
  7a:	c2 cf       	rjmp	.-124    	; 0x0 <__vectors>

0000007c <change_mode>:

}


void change_mode(void) { 
	if (mode == 0) 
  7c:	80 91 60 00 	lds	r24, 0x0060
  80:	88 23       	and	r24, r24
  82:	11 f4       	brne	.+4      	; 0x88 <change_mode+0xc>
		mode = 1;
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	05 c0       	rjmp	.+10     	; 0x92 <change_mode+0x16>
	else if (mode == 1) 
  88:	80 91 60 00 	lds	r24, 0x0060
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	21 f4       	brne	.+8      	; 0x98 <change_mode+0x1c>
		mode = 2;
  90:	82 e0       	ldi	r24, 0x02	; 2
  92:	80 93 60 00 	sts	0x0060, r24
  96:	08 95       	ret
	else 
		mode = 0;
  98:	10 92 60 00 	sts	0x0060, r1
  9c:	08 95       	ret

0000009e <__vector_1>:
// mode 1 lights up leds from left to right
// mode 2 lights up leds from left to right and from right to left
volatile unsigned char  mode = 2;

// external interrupt button, changes techometer mode
SIGNAL(SIG_INTERRUPT0) {	
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
  a8:	2f 93       	push	r18
  aa:	3f 93       	push	r19
  ac:	4f 93       	push	r20
  ae:	5f 93       	push	r21
  b0:	6f 93       	push	r22
  b2:	7f 93       	push	r23
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
  b8:	af 93       	push	r26
  ba:	bf 93       	push	r27
  bc:	ef 93       	push	r30
  be:	ff 93       	push	r31
	change_mode();
  c0:	dd df       	rcall	.-70     	; 0x7c <change_mode>
}
  c2:	ff 91       	pop	r31
  c4:	ef 91       	pop	r30
  c6:	bf 91       	pop	r27
  c8:	af 91       	pop	r26
  ca:	9f 91       	pop	r25
  cc:	8f 91       	pop	r24
  ce:	7f 91       	pop	r23
  d0:	6f 91       	pop	r22
  d2:	5f 91       	pop	r21
  d4:	4f 91       	pop	r20
  d6:	3f 91       	pop	r19
  d8:	2f 91       	pop	r18
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <USART_Transmit>:
}	

// serial transmit method
void USART_Transmit(unsigned char data) {
	// wait for empty transmit buffer
	while (!(UCSRA & (1<<UDRE)));
  e4:	5d 9b       	sbis	0x0b, 5	; 11
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <USART_Transmit>
	// put data into buffer, sends the data
	UDR = data;
  e8:	8c b9       	out	0x0c, r24	; 12
}
  ea:	08 95       	ret

000000ec <USART_Receive>:

// serial receive method for pooling (not used)
unsigned char USART_Receive(void) {
	// wait for data to be received
	while (!(UCSRA & (1<<RXC)));
  ec:	5f 9b       	sbis	0x0b, 7	; 11
  ee:	fe cf       	rjmp	.-4      	; 0xec <USART_Receive>
	// get and return received data from buffer;
	return UDR;
  f0:	8c b1       	in	r24, 0x0c	; 12
}
  f2:	08 95       	ret

000000f4 <USART_Init>:

// initializes serial port
void USART_Init(unsigned int baud) {
	// set baud rate
	UBRRH = (unsigned char) (baud>>8);
  f4:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char) baud;
  f6:	89 b9       	out	0x09, r24	; 9

	// enable receiver and transmitter 
	UCSRB = (1<<RXEN) | (1<<TXEN) | (1 << RXCIE);
  f8:	88 e9       	ldi	r24, 0x98	; 152
  fa:	8a b9       	out	0x0a, r24	; 10
	// Set frame format: 8data, 1stop bit 
	UCSRC = (1<<URSEL) | (3<<UCSZ0);
  fc:	86 e8       	ldi	r24, 0x86	; 134
  fe:	80 bd       	out	0x20, r24	; 32
}
 100:	08 95       	ret

00000102 <setup_leds>:
	PORTA = 0xFF;
	PORTC = 15<<PORTC4;
}

void setup_leds(int mode) {
	if (mode == 0) {
 102:	00 97       	sbiw	r24, 0x00	; 0
 104:	21 f4       	brne	.+8      	; 0x10e <setup_leds+0xc>
		PORTC = 14<<PORTC4; 
 106:	80 ee       	ldi	r24, 0xE0	; 224
 108:	85 bb       	out	0x15, r24	; 21
		PORTA = 0xFF;
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	05 c0       	rjmp	.+10     	; 0x118 <setup_leds+0x16>
	} else if (mode == 1) {
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	29 f4       	brne	.+10     	; 0x11c <setup_leds+0x1a>
		PORTC = 15<<PORTC4;		
 112:	80 ef       	ldi	r24, 0xF0	; 240
 114:	85 bb       	out	0x15, r24	; 21
		PORTA = 0xFE;	
 116:	8e ef       	ldi	r24, 0xFE	; 254
 118:	8b bb       	out	0x1b, r24	; 27
 11a:	08 95       	ret
	} else {
		PORTA = 0xFE;
 11c:	8e ef       	ldi	r24, 0xFE	; 254
 11e:	8b bb       	out	0x1b, r24	; 27
		PORTC = 14<<PORTC4;		
 120:	80 ee       	ldi	r24, 0xE0	; 224
 122:	85 bb       	out	0x15, r24	; 21
 124:	08 95       	ret

00000126 <light_up_leds>:
		mode = 2;
	else 
		mode = 0;
}

void light_up_leds(unsigned char number_of_leds) { 
 126:	98 2f       	mov	r25, r24
	unsigned char shift_count;
	if (mode == 0 || mode == 1) {
 128:	80 91 60 00 	lds	r24, 0x0060
 12c:	88 23       	and	r24, r24
 12e:	29 f0       	breq	.+10     	; 0x13a <light_up_leds+0x14>
 130:	80 91 60 00 	lds	r24, 0x0060
 134:	81 30       	cpi	r24, 0x01	; 1
 136:	09 f0       	breq	.+2      	; 0x13a <light_up_leds+0x14>
 138:	5d c0       	rjmp	.+186    	; 0x1f4 <light_up_leds+0xce>
		switch (number_of_leds) {
 13a:	e9 2f       	mov	r30, r25
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	ed 30       	cpi	r30, 0x0D	; 13
 140:	f1 05       	cpc	r31, r1
 142:	08 f0       	brcs	.+2      	; 0x146 <light_up_leds+0x20>
 144:	8e c0       	rjmp	.+284    	; 0x262 <__stack+0x3>
 146:	eb 5e       	subi	r30, 0xEB	; 235
 148:	ff 4f       	sbci	r31, 0xFF	; 255
 14a:	09 94       	ijmp
				break;
			case 1:
				setup_leds(mode);
				break;
			case 2:	case 3:	case 4:		
				shift_count = number_of_leds - 1;
 14c:	29 2f       	mov	r18, r25
 14e:	21 50       	subi	r18, 0x01	; 1
				if (mode == 0) {
 150:	80 91 60 00 	lds	r24, 0x0060
 154:	88 23       	and	r24, r24
 156:	51 f4       	brne	.+20     	; 0x16c <light_up_leds+0x46>
					PORTC = 0xE0<<shift_count;	// 11100000<<shift_count
 158:	80 ee       	ldi	r24, 0xE0	; 224
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <light_up_leds+0x3c>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	2a 95       	dec	r18
 164:	e2 f7       	brpl	.-8      	; 0x15e <light_up_leds+0x38>
 166:	85 bb       	out	0x15, r24	; 21
					PORTA = 0xFF;
 168:	8f ef       	ldi	r24, 0xFF	; 255
 16a:	77 c0       	rjmp	.+238    	; 0x25a <light_up_leds+0x134>
				} else if (mode == 1) {
 16c:	80 91 60 00 	lds	r24, 0x0060
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	09 f0       	breq	.+2      	; 0x176 <light_up_leds+0x50>
 174:	76 c0       	rjmp	.+236    	; 0x262 <__stack+0x3>
					PORTC = 0xF0;				// 11110000
 176:	80 ef       	ldi	r24, 0xF0	; 240
 178:	85 bb       	out	0x15, r24	; 21
					PORTA = 0xFE<<shift_count;	// 11111110
 17a:	8e ef       	ldi	r24, 0xFE	; 254
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	13 c0       	rjmp	.+38     	; 0x1a6 <light_up_leds+0x80>
				} 
				break;		
			case 5: case 6: case 7: case 8:
				shift_count = number_of_leds - 5;
 180:	29 2f       	mov	r18, r25
 182:	25 50       	subi	r18, 0x05	; 5
				if (mode == 0) {
 184:	80 91 60 00 	lds	r24, 0x0060
 188:	88 23       	and	r24, r24
 18a:	21 f4       	brne	.+8      	; 0x194 <light_up_leds+0x6e>
					PORTC = 0;
 18c:	15 ba       	out	0x15, r1	; 21
					PORTA = 0x7F>>shift_count; // 01111111 >> shift_count
 18e:	8f e7       	ldi	r24, 0x7F	; 127
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	1b c0       	rjmp	.+54     	; 0x1ca <light_up_leds+0xa4>
				} else if (mode == 1) {
 194:	80 91 60 00 	lds	r24, 0x0060
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	09 f0       	breq	.+2      	; 0x19e <light_up_leds+0x78>
 19c:	62 c0       	rjmp	.+196    	; 0x262 <__stack+0x3>
					PORTC = 0xF0;
 19e:	80 ef       	ldi	r24, 0xF0	; 240
 1a0:	85 bb       	out	0x15, r24	; 21
					PORTA = 0xE0<<shift_count; // 11100000 >> shift_count				
 1a2:	80 ee       	ldi	r24, 0xE0	; 224
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <light_up_leds+0x86>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	2a 95       	dec	r18
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <light_up_leds+0x82>
 1b0:	54 c0       	rjmp	.+168    	; 0x25a <light_up_leds+0x134>
				}		
				break;
			case 9: case 10: case 11: case 12:
				shift_count = number_of_leds - 9;
 1b2:	29 2f       	mov	r18, r25
 1b4:	29 50       	subi	r18, 0x09	; 9
}	

// serial transmit method
void USART_Transmit(unsigned char data) {
	// wait for empty transmit buffer
	while (!(UCSRA & (1<<UDRE)));
 1b6:	5d 9b       	sbis	0x0b, 5	; 11
 1b8:	fe cf       	rjmp	.-4      	; 0x1b6 <light_up_leds+0x90>
	// put data into buffer, sends the data
	UDR = data;
 1ba:	9c b9       	out	0x0c, r25	; 12
				}		
				break;
			case 9: case 10: case 11: case 12:
				shift_count = number_of_leds - 9;
				USART_Transmit(number_of_leds);			
				if (mode == 0) { 
 1bc:	80 91 60 00 	lds	r24, 0x0060
 1c0:	88 23       	and	r24, r24
 1c2:	49 f4       	brne	.+18     	; 0x1d6 <light_up_leds+0xb0>
					PORTC = 0;
 1c4:	15 ba       	out	0x15, r1	; 21
					PORTA = 7>>shift_count; // 00000111 >> shift_count				
 1c6:	87 e0       	ldi	r24, 0x07	; 7
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <light_up_leds+0xaa>
 1cc:	95 95       	asr	r25
 1ce:	87 95       	ror	r24
 1d0:	2a 95       	dec	r18
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <light_up_leds+0xa6>
 1d4:	42 c0       	rjmp	.+132    	; 0x25a <light_up_leds+0x134>
				} else if (mode == 1) {
 1d6:	80 91 60 00 	lds	r24, 0x0060
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	09 f0       	breq	.+2      	; 0x1e0 <light_up_leds+0xba>
 1de:	41 c0       	rjmp	.+130    	; 0x262 <__stack+0x3>
					PORTC = 0x70>>shift_count; // 01110000 >> shift_count
 1e0:	80 e7       	ldi	r24, 0x70	; 112
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <light_up_leds+0xc4>
 1e6:	95 95       	asr	r25
 1e8:	87 95       	ror	r24
 1ea:	2a 95       	dec	r18
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <light_up_leds+0xc0>
 1ee:	85 bb       	out	0x15, r24	; 21
					PORTA = 0;			
 1f0:	1b ba       	out	0x1b, r1	; 27
 1f2:	08 95       	ret
				}
				break;							
		}
	} else { // third mode (leds lightning up to the center)
		switch (number_of_leds) { 
 1f4:	96 30       	cpi	r25, 0x06	; 6
 1f6:	d1 f0       	breq	.+52     	; 0x22c <light_up_leds+0x106>
 1f8:	97 30       	cpi	r25, 0x07	; 7
 1fa:	38 f4       	brcc	.+14     	; 0x20a <light_up_leds+0xe4>
 1fc:	92 30       	cpi	r25, 0x02	; 2
 1fe:	89 f0       	breq	.+34     	; 0x222 <light_up_leds+0xfc>
 200:	94 30       	cpi	r25, 0x04	; 4
 202:	a1 f0       	breq	.+40     	; 0x22c <light_up_leds+0x106>
 204:	99 23       	and	r25, r25
 206:	41 f0       	breq	.+16     	; 0x218 <light_up_leds+0xf2>
 208:	08 95       	ret
 20a:	9a 30       	cpi	r25, 0x0A	; 10
 20c:	21 f1       	breq	.+72     	; 0x256 <light_up_leds+0x130>
 20e:	9c 30       	cpi	r25, 0x0C	; 12
 210:	31 f1       	breq	.+76     	; 0x25e <light_up_leds+0x138>
 212:	98 30       	cpi	r25, 0x08	; 8
 214:	31 f5       	brne	.+76     	; 0x262 <__stack+0x3>
 216:	0a c0       	rjmp	.+20     	; 0x22c <light_up_leds+0x106>
			case 0:
				PORTA = 0xFF; // 11111111
 218:	8f ef       	ldi	r24, 0xFF	; 255
 21a:	8b bb       	out	0x1b, r24	; 27
				PORTC = 0xF0; // 11110000
 21c:	80 ef       	ldi	r24, 0xF0	; 240
 21e:	85 bb       	out	0x15, r24	; 21
 220:	08 95       	ret
				break;
		 	case 2:
				setup_leds(mode);
 222:	80 91 60 00 	lds	r24, 0x0060
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	6c df       	rcall	.-296    	; 0x102 <setup_leds>
 22a:	08 95       	ret
				break;
			case 4:	case 6:	case 8:
				shift_count = (number_of_leds / 2) - 1;
				PORTC = 0xE0<<shift_count;	// 11100000<<shift_count
 22c:	89 2f       	mov	r24, r25
 22e:	86 95       	lsr	r24
 230:	81 50       	subi	r24, 0x01	; 1
 232:	20 ee       	ldi	r18, 0xE0	; 224
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	08 2e       	mov	r0, r24
 238:	02 c0       	rjmp	.+4      	; 0x23e <light_up_leds+0x118>
 23a:	22 0f       	add	r18, r18
 23c:	33 1f       	adc	r19, r19
 23e:	0a 94       	dec	r0
 240:	e2 f7       	brpl	.-8      	; 0x23a <light_up_leds+0x114>
 242:	25 bb       	out	0x15, r18	; 21
				PORTA = 0xFE<<shift_count;	// 11111110<<shift_count
 244:	2e ef       	ldi	r18, 0xFE	; 254
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <light_up_leds+0x128>
 24a:	22 0f       	add	r18, r18
 24c:	33 1f       	adc	r19, r19
 24e:	8a 95       	dec	r24
 250:	e2 f7       	brpl	.-8      	; 0x24a <light_up_leds+0x124>
 252:	2b bb       	out	0x1b, r18	; 27
 254:	08 95       	ret
				break;
			case 10:
				PORTC = 0;
 256:	15 ba       	out	0x15, r1	; 21
				PORTA = 0x60;
 258:	80 e6       	ldi	r24, 0x60	; 96
 25a:	8b bb       	out	0x1b, r24	; 27
 25c:	08 95       	ret
				break;
			case 12:
				PORTC = 0;
 25e:	15 ba       	out	0x15, r1	; 21
				PORTA = 0;
 260:	1b ba       	out	0x1b, r1	; 27
 262:	08 95       	ret

00000264 <__vector_11>:
	change_mode();
}


// serial port receive interrupt
SIGNAL(SIG_UART_RECV) {
 264:	1f 92       	push	r1
 266:	0f 92       	push	r0
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	0f 92       	push	r0
 26c:	11 24       	eor	r1, r1
 26e:	2f 93       	push	r18
 270:	3f 93       	push	r19
 272:	4f 93       	push	r20
 274:	5f 93       	push	r21
 276:	6f 93       	push	r22
 278:	7f 93       	push	r23
 27a:	8f 93       	push	r24
 27c:	9f 93       	push	r25
 27e:	af 93       	push	r26
 280:	bf 93       	push	r27
 282:	ef 93       	push	r30
 284:	ff 93       	push	r31
	unsigned char c;
	c = UDR;	
 286:	9c b1       	in	r25, 0x0c	; 12
	switch (c) {
 288:	91 33       	cpi	r25, 0x31	; 49
 28a:	39 f0       	breq	.+14     	; 0x29a <__vector_11+0x36>
 28c:	92 33       	cpi	r25, 0x32	; 50
 28e:	39 f0       	breq	.+14     	; 0x29e <__vector_11+0x3a>
 290:	90 33       	cpi	r25, 0x30	; 48
 292:	41 f4       	brne	.+16     	; 0x2a4 <__vector_11+0x40>
		case '0':
			mode = 0;
 294:	10 92 60 00 	sts	0x0060, r1
 298:	05 c0       	rjmp	.+10     	; 0x2a4 <__vector_11+0x40>
			break;
		case '1':
			mode = 1;
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	01 c0       	rjmp	.+2      	; 0x2a0 <__vector_11+0x3c>
			break;
		case '2': 
			mode = 2;
 29e:	82 e0       	ldi	r24, 0x02	; 2
 2a0:	80 93 60 00 	sts	0x0060, r24
			break;
	}
	light_up_leds(c);
 2a4:	89 2f       	mov	r24, r25
 2a6:	3f df       	rcall	.-386    	; 0x126 <light_up_leds>

}
 2a8:	ff 91       	pop	r31
 2aa:	ef 91       	pop	r30
 2ac:	bf 91       	pop	r27
 2ae:	af 91       	pop	r26
 2b0:	9f 91       	pop	r25
 2b2:	8f 91       	pop	r24
 2b4:	7f 91       	pop	r23
 2b6:	6f 91       	pop	r22
 2b8:	5f 91       	pop	r21
 2ba:	4f 91       	pop	r20
 2bc:	3f 91       	pop	r19
 2be:	2f 91       	pop	r18
 2c0:	0f 90       	pop	r0
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	0f 90       	pop	r0
 2c6:	1f 90       	pop	r1
 2c8:	18 95       	reti

000002ca <delay_ms>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2ca:	2a ef       	ldi	r18, 0xFA	; 250
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	04 c0       	rjmp	.+8      	; 0x2d8 <delay_ms+0xe>
 2d0:	f9 01       	movw	r30, r18
 2d2:	31 97       	sbiw	r30, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <delay_ms+0x8>
}

void delay_ms(uint16_t ms) {
	while (ms) {
		_delay_ms(1);
		ms--;
 2d6:	01 97       	sbiw	r24, 0x01	; 1
		PORTC = 14<<PORTC4;		
	}
}

void delay_ms(uint16_t ms) {
	while (ms) {
 2d8:	00 97       	sbiw	r24, 0x00	; 0
 2da:	d1 f7       	brne	.-12     	; 0x2d0 <delay_ms+0x6>
		_delay_ms(1);
		ms--;
	}
}
 2dc:	08 95       	ret

000002de <test_leds>:
			test_leds();
		} 		
  	}              
}

void test_leds(void) { 	
 2de:	ef 92       	push	r14
 2e0:	ff 92       	push	r15
 2e2:	0f 93       	push	r16
 2e4:	1f 93       	push	r17
	// if 0, leds will light up to the left, if 1, then to the right
	// if 2 then as xxx____xxx (from left and right)
	unsigned char test_mode = mode;
 2e6:	10 91 60 00 	lds	r17, 0x0060

	setup_leds(test_mode);
 2ea:	81 2f       	mov	r24, r17
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	09 df       	rcall	.-494    	; 0x102 <setup_leds>
	delay_ms(SHORT_DELAY);
 2f0:	82 e3       	ldi	r24, 0x32	; 50
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	ea df       	rcall	.-44     	; 0x2ca <delay_ms>
			} else {
				PORTC = PORTC<<1;
			}						
		} else if (mode == 1) {			
			if (PORTA == 0 && PORTC == 0xF0) {
				PORTC = 0x70;
 2f6:	90 e7       	ldi	r25, 0x70	; 112
 2f8:	e9 2e       	mov	r14, r25
		if (mode != test_mode) {			
			test_mode = mode;
			setup_leds(mode);			
		} else if (mode == 0) {				
			if (PORTC == 0 && PORTA == 0xFF) {
				PORTA = 0x7F;				
 2fa:	8f e7       	ldi	r24, 0x7F	; 127
 2fc:	f8 2e       	mov	r15, r24
 2fe:	4b c0       	rjmp	.+150    	; 0x396 <test_leds+0xb8>
	unsigned char test_mode = mode;

	setup_leds(test_mode);
	delay_ms(SHORT_DELAY);
	while (PORTA != 0 || PORTC != 0) {				
		if (mode != test_mode) {			
 300:	00 91 60 00 	lds	r16, 0x0060
 304:	01 17       	cp	r16, r17
 306:	39 f0       	breq	.+14     	; 0x316 <test_leds+0x38>
			test_mode = mode;
 308:	00 91 60 00 	lds	r16, 0x0060
			setup_leds(mode);			
 30c:	80 91 60 00 	lds	r24, 0x0060
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	f7 de       	rcall	.-530    	; 0x102 <setup_leds>
 314:	3c c0       	rjmp	.+120    	; 0x38e <test_leds+0xb0>
		} else if (mode == 0) {				
 316:	80 91 60 00 	lds	r24, 0x0060
 31a:	88 23       	and	r24, r24
 31c:	89 f4       	brne	.+34     	; 0x340 <test_leds+0x62>
			if (PORTC == 0 && PORTA == 0xFF) {
 31e:	85 b3       	in	r24, 0x15	; 21
 320:	88 23       	and	r24, r24
 322:	29 f4       	brne	.+10     	; 0x32e <test_leds+0x50>
 324:	8b b3       	in	r24, 0x1b	; 27
 326:	8f 3f       	cpi	r24, 0xFF	; 255
 328:	11 f4       	brne	.+4      	; 0x32e <test_leds+0x50>
				PORTA = 0x7F;				
 32a:	fb ba       	out	0x1b, r15	; 27
 32c:	30 c0       	rjmp	.+96     	; 0x38e <test_leds+0xb0>
			} else if (PORTC == 0) {
 32e:	85 b3       	in	r24, 0x15	; 21
 330:	88 23       	and	r24, r24
 332:	19 f4       	brne	.+6      	; 0x33a <test_leds+0x5c>
				PORTA = PORTA>>1;				
 334:	8b b3       	in	r24, 0x1b	; 27
 336:	86 95       	lsr	r24
 338:	29 c0       	rjmp	.+82     	; 0x38c <test_leds+0xae>
			} else {
				PORTC = PORTC<<1;
 33a:	85 b3       	in	r24, 0x15	; 21
 33c:	88 0f       	add	r24, r24
 33e:	12 c0       	rjmp	.+36     	; 0x364 <test_leds+0x86>
			}						
		} else if (mode == 1) {			
 340:	80 91 60 00 	lds	r24, 0x0060
 344:	81 30       	cpi	r24, 0x01	; 1
 346:	81 f4       	brne	.+32     	; 0x368 <test_leds+0x8a>
			if (PORTA == 0 && PORTC == 0xF0) {
 348:	8b b3       	in	r24, 0x1b	; 27
 34a:	88 23       	and	r24, r24
 34c:	29 f4       	brne	.+10     	; 0x358 <test_leds+0x7a>
 34e:	85 b3       	in	r24, 0x15	; 21
 350:	80 3f       	cpi	r24, 0xF0	; 240
 352:	11 f4       	brne	.+4      	; 0x358 <test_leds+0x7a>
				PORTC = 0x70;
 354:	e5 ba       	out	0x15, r14	; 21
 356:	1b c0       	rjmp	.+54     	; 0x38e <test_leds+0xb0>
			} else if (PORTA == 0) {
 358:	8b b3       	in	r24, 0x1b	; 27
 35a:	88 23       	and	r24, r24
 35c:	59 f4       	brne	.+22     	; 0x374 <test_leds+0x96>
				PORTC = PORTC>>1 & 0xF0;
 35e:	85 b3       	in	r24, 0x15	; 21
 360:	86 95       	lsr	r24
 362:	80 7f       	andi	r24, 0xF0	; 240
 364:	85 bb       	out	0x15, r24	; 21
 366:	13 c0       	rjmp	.+38     	; 0x38e <test_leds+0xb0>
			} else {
				PORTA = PORTA<<1;
			}			
		} else {
			if (PORTC != 0) { 
 368:	85 b3       	in	r24, 0x15	; 21
 36a:	88 23       	and	r24, r24
 36c:	31 f0       	breq	.+12     	; 0x37a <test_leds+0x9c>
				PORTC = PORTC<<1;					
 36e:	85 b3       	in	r24, 0x15	; 21
 370:	88 0f       	add	r24, r24
 372:	85 bb       	out	0x15, r24	; 21
				PORTA = PORTA<<1;
 374:	8b b3       	in	r24, 0x1b	; 27
 376:	88 0f       	add	r24, r24
 378:	09 c0       	rjmp	.+18     	; 0x38c <test_leds+0xae>
			} else if (PORTA & 0x80) {				
 37a:	df 9b       	sbis	0x1b, 7	; 27
 37c:	02 c0       	rjmp	.+4      	; 0x382 <test_leds+0xa4>
				PORTA = PORTA & 0x7F;
 37e:	df 98       	cbi	0x1b, 7	; 27
 380:	06 c0       	rjmp	.+12     	; 0x38e <test_leds+0xb0>
			} else { 
				PORTA = PORTA>>1 & PORTA<<1;
 382:	9b b3       	in	r25, 0x1b	; 27
 384:	8b b3       	in	r24, 0x1b	; 27
 386:	88 0f       	add	r24, r24
 388:	96 95       	lsr	r25
 38a:	89 23       	and	r24, r25
 38c:	8b bb       	out	0x1b, r24	; 27
			}							
		}	
		delay_ms(SHORT_DELAY);
 38e:	82 e3       	ldi	r24, 0x32	; 50
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	9b df       	rcall	.-202    	; 0x2ca <delay_ms>
 394:	10 2f       	mov	r17, r16
	// if 2 then as xxx____xxx (from left and right)
	unsigned char test_mode = mode;

	setup_leds(test_mode);
	delay_ms(SHORT_DELAY);
	while (PORTA != 0 || PORTC != 0) {				
 396:	8b b3       	in	r24, 0x1b	; 27
 398:	88 23       	and	r24, r24
 39a:	09 f0       	breq	.+2      	; 0x39e <test_leds+0xc0>
 39c:	b1 cf       	rjmp	.-158    	; 0x300 <test_leds+0x22>
 39e:	85 b3       	in	r24, 0x15	; 21
 3a0:	88 23       	and	r24, r24
 3a2:	09 f0       	breq	.+2      	; 0x3a6 <test_leds+0xc8>
 3a4:	ad cf       	rjmp	.-166    	; 0x300 <test_leds+0x22>
		}	
		delay_ms(SHORT_DELAY);
	}
		
	// all leds blinking
	for (i = 0; i < 4; i++) {
 3a6:	10 92 62 00 	sts	0x0062, r1
		delay_ms(DELAY);
		PORTA = 0xFF;
 3aa:	0f ef       	ldi	r16, 0xFF	; 255
		PORTC = 15<<PORTC4;
 3ac:	10 ef       	ldi	r17, 0xF0	; 240
 3ae:	0f c0       	rjmp	.+30     	; 0x3ce <test_leds+0xf0>
		delay_ms(SHORT_DELAY);
	}
		
	// all leds blinking
	for (i = 0; i < 4; i++) {
		delay_ms(DELAY);
 3b0:	84 e6       	ldi	r24, 0x64	; 100
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	8a df       	rcall	.-236    	; 0x2ca <delay_ms>
		PORTA = 0xFF;
 3b6:	0b bb       	out	0x1b, r16	; 27
		PORTC = 15<<PORTC4;
 3b8:	15 bb       	out	0x15, r17	; 21
		delay_ms(SHORT_DELAY);
 3ba:	82 e3       	ldi	r24, 0x32	; 50
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	85 df       	rcall	.-246    	; 0x2ca <delay_ms>
		PORTA = 0;
 3c0:	1b ba       	out	0x1b, r1	; 27
		PORTC = 0;
 3c2:	15 ba       	out	0x15, r1	; 21
		}	
		delay_ms(SHORT_DELAY);
	}
		
	// all leds blinking
	for (i = 0; i < 4; i++) {
 3c4:	80 91 62 00 	lds	r24, 0x0062
 3c8:	8f 5f       	subi	r24, 0xFF	; 255
 3ca:	80 93 62 00 	sts	0x0062, r24
 3ce:	80 91 62 00 	lds	r24, 0x0062
 3d2:	84 30       	cpi	r24, 0x04	; 4
 3d4:	68 f3       	brcs	.-38     	; 0x3b0 <test_leds+0xd2>
		PORTA = 0;
		PORTC = 0;
	}		
		
	// turn off leds after test	
	PORTA = 0xFF;
 3d6:	8f ef       	ldi	r24, 0xFF	; 255
 3d8:	8b bb       	out	0x1b, r24	; 27
	PORTC = 15<<PORTC4;
 3da:	80 ef       	ldi	r24, 0xF0	; 240
 3dc:	85 bb       	out	0x15, r24	; 21
}
 3de:	1f 91       	pop	r17
 3e0:	0f 91       	pop	r16
 3e2:	ff 90       	pop	r15
 3e4:	ef 90       	pop	r14
 3e6:	08 95       	ret

000003e8 <main>:
}

// initializes serial port
void USART_Init(unsigned int baud) {
	// set baud rate
	UBRRH = (unsigned char) (baud>>8);
 3e8:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char) baud;
 3ea:	8c e0       	ldi	r24, 0x0C	; 12
 3ec:	89 b9       	out	0x09, r24	; 9

	// enable receiver and transmitter 
	UCSRB = (1<<RXEN) | (1<<TXEN) | (1 << RXCIE);
 3ee:	88 e9       	ldi	r24, 0x98	; 152
 3f0:	8a b9       	out	0x0a, r24	; 10
	// Set frame format: 8data, 1stop bit 
	UCSRC = (1<<URSEL) | (3<<UCSZ0);
 3f2:	86 e8       	ldi	r24, 0x86	; 134
 3f4:	80 bd       	out	0x20, r24	; 32
int main(void) {
	// init usart
	USART_Init(MYUBBR);
	
	// pull up int0 pin
	PORTD |= (1<<PORTD2);
 3f6:	92 9a       	sbi	0x12, 2	; 18
	// interrupt on rising edge of int0
	MCUCR |= (1<<ISC01);
 3f8:	85 b7       	in	r24, 0x35	; 53
 3fa:	82 60       	ori	r24, 0x02	; 2
 3fc:	85 bf       	out	0x35, r24	; 53
	// add int0 to interrupts
  	GICR |= (1<<INT0);
 3fe:	8b b7       	in	r24, 0x3b	; 59
 400:	80 64       	ori	r24, 0x40	; 64
 402:	8b bf       	out	0x3b, r24	; 59
	// enable interrupts
  	sei();                
 404:	78 94       	sei

	// port A as output
	DDRA = 0xFF;	
 406:	8f ef       	ldi	r24, 0xFF	; 255
 408:	8a bb       	out	0x1a, r24	; 26
	// Turn off leds
	PORTA = 0xFF;
 40a:	8b bb       	out	0x1b, r24	; 27

	// Part of PORT C as output
	DDRC |= (15<<DDC4);
 40c:	84 b3       	in	r24, 0x14	; 20
 40e:	80 6f       	ori	r24, 0xF0	; 240
 410:	84 bb       	out	0x14, r24	; 20
	//turn off leds
	PORTC = (15<<PORTC4);
 412:	80 ef       	ldi	r24, 0xF0	; 240
 414:	85 bb       	out	0x15, r24	; 21
	// pull up button on portc0
	PORTD |= (1<<PORTD7);
 416:	97 9a       	sbi	0x12, 7	; 18

	test_leds();
 418:	62 df       	rcall	.-316    	; 0x2de <test_leds>
  	while(1) {		
		if (!(PIND & (1<<PIND7))) {
 41a:	87 99       	sbic	0x10, 7	; 16
 41c:	fe cf       	rjmp	.-4      	; 0x41a <main+0x32>
 41e:	fc cf       	rjmp	.-8      	; 0x418 <main+0x30>

00000420 <_exit>:
 420:	f8 94       	cli

00000422 <__stop_program>:
 422:	ff cf       	rjmp	.-2      	; 0x422 <__stop_program>
